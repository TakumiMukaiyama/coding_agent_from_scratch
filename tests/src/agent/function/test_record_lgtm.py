import unittest

from src.agent.function.record_lgtm import RecordLgtmFunction
from src.agent.schema.record_lgtm_input import RecordLgtmInput


class TestRecordLgtmFunction(unittest.TestCase):
    """Test for RecordLgtmFunction class"""

    def setUp(self):
        """Setup before tests"""
        self.function = RecordLgtmFunction()

    def test_init(self):
        """Verify that lgtm status is False after initialization"""
        self.assertFalse(self.function.lgtm())

    def test_execute(self):
        """Verify that lgtm status becomes True after execute execution"""
        result = self.function.execute()

        # Verify return value
        self.assertEqual(result, {"result": "LGTM recorded"})

        # Verify that lgtm status is True
        self.assertTrue(self.function.lgtm())

    def test_to_tool(self):
        """Verify that to_tool method returns StructuredTool"""
        tool = RecordLgtmFunction.to_tool()

        # Verify tool name
        self.assertEqual(tool.name, "record_lgtm_function")

        # Verify argument schema
        self.assertEqual(tool.args_schema, RecordLgtmInput)

        # Verify tool description
        self.assertIn("LGTM", tool.description)

    def test_tool_execution(self):
        """Verify that tool generated by to_tool can be executed normally"""
        tool = RecordLgtmFunction.to_tool()

        # Execute tool
        result = tool.invoke({})

        # Verify return value
        self.assertEqual(result, {"result": "LGTM recorded"})


if __name__ == "__main__":
    unittest.main()
