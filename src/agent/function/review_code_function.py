from typing import Any

from langchain_core.tools import StructuredTool

from src.agent.schema.reviewer_input import ReviewerInput
from src.application.function.base import BaseFunction


class ReviewCodeFunction(BaseFunction):
    """Tool for performing code reviews."""

    @staticmethod
    def execute(diff: str, programmer_comment: str | None = None) -> dict[str, Any]:
        """Assumes review results are generated by LLM FunctionCalling.

        This only returns a stub response without raising exceptions.
        """
        return {
            "message": "Handled by LLM FunctionCalling. No real processing done here."
        }

    @classmethod
    def to_tool(cls: type["ReviewCodeFunction"]) -> StructuredTool:
        """Create the tool."""
        return StructuredTool.from_function(
            name=cls.function_name(),
            description="Reviews pull request code diffs, summarizes issues and improvements, and determines LGTM approval.",
            func=cls.execute,
            args_schema=ReviewerInput,
        )
